package com.eg.swa.rabbitmq.config;

import org.springframework.amqp.core.AmqpAdmin;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.DirectExchange;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitAdmin;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.amqp.support.converter.MessageConverter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RabbitMQConfig {

	@Value("${spring.rabbitmq.host}")
	private String rabbitMQHost;

	@Value("${spring.rabbitmq.username}")
	private String rabbitMQUsername;

	@Value("${spring.rabbitmq.password}")
	private String rabbitMQPassword;

	@Value("${rabbitmq.queue}")
	private String rabbitMQQueue;

	@Value("${rabbitmq.exchange}")
	private String rabbitMQExchange;

	@Value("${rabbitmq.routingkey}")
	private String rabbitMQRoutingkey;
	

	@Bean
	public ConnectionFactory connectionFactory() {
		CachingConnectionFactory connectionFactory = new CachingConnectionFactory();
		connectionFactory.setHost(rabbitMQHost);
		connectionFactory.setUsername(rabbitMQUsername);
		connectionFactory.setPassword(rabbitMQPassword);
		return connectionFactory;
	}

	@Bean
	public Queue queue() {
		return new Queue(rabbitMQQueue, false);
	}

	@Bean
    public DirectExchange exchange(){
        return new DirectExchange(rabbitMQExchange);
    }

	@Bean
	public Binding binding() {
		return BindingBuilder.bind(queue()).to(exchange()).with(rabbitMQRoutingkey);
	}

	@Bean
	public MessageConverter messageConverter() {
		return new Jackson2JsonMessageConverter();
	}

	@Bean
	public RabbitTemplate rabbitTemplate() {
		RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory());
		rabbitTemplate.setExchange(rabbitMQExchange);
		rabbitTemplate.setRoutingKey(rabbitMQRoutingkey);
		rabbitTemplate.setMessageConverter(messageConverter());
		return rabbitTemplate;
	}
	
	@Bean
    public AmqpAdmin amqpAdmin() {
        return new RabbitAdmin(connectionFactory());
    }
	
	
	@Bean
	public SimpleMessageListenerContainer messageListenerContainer() {
		SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();
		container.setConnectionFactory(connectionFactory());
		
		return container;
	}
	
}
