package com.eg.swa.WS.config;

@Configuration
@EnableWs
public class PaymentWebServiceConfig extends WsConfigurerAdapter {

    @Autowired
    private PaymentService paymentService;

    @Bean
    public ServletRegistrationBean<MessageDispatcherServlet> messageDispatcherServlet() {
        MessageDispatcherServlet servlet = new MessageDispatcherServlet();
        servlet.setApplicationContextClass(AnnotationConfigApplicationContext.class);
        servlet.setApplicationContextConfig(applicationContext());
        servlet.setTransformWsdlLocations(true);
        return new ServletRegistrationBean<>(servlet, "/payment/*");
    }

    @Bean
    public ApplicationContext applicationContext() {
        return new AnnotationConfigApplicationContext(PaymentWebServiceConfig.class);
    }

    @Bean(name = "paymentService")
    public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchema paymentSchema) {
        DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();
        wsdl11Definition.setPortTypeName("PaymentPort");
        wsdl11Definition.setLocationUri("/payment");
        wsdl11Definition.setTargetNamespace("http://example.com/payment");
        wsdl11Definition.setSchema(paymentSchema);
        return wsdl11Definition;
    }

    @Bean
    public XsdSchema paymentSchema() {
        return new SimpleXsdSchema(new ClassPathResource("payment.xsd"));
    }

    @Bean
    public Jaxb2Marshaller marshaller() {
        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();
        marshaller.setPackagesToScan("com.example.payment");
        return marshaller;
    }

    @Bean
    public PaymentEndpoint paymentEndpoint(Jaxb2Marshaller marshaller) {
        PaymentEndpoint endpoint = new PaymentEndpoint();
        endpoint.setMarshaller(marshaller);
        endpoint.setUnmarshaller(marshaller);
        endpoint.setPaymentService(paymentService);
        return endpoint;
    }
}

