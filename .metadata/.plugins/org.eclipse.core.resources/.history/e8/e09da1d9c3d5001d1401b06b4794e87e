package com.eg.swa.ntier.shopping.service;

import org.springframework.stereotype.Service;

import com.eg.swa.ntier.shopping.model.CartItem;
import com.eg.swa.ntier.shopping.model.Product;
import com.eg.swa.ntier.shopping.model.ShoppingCart;
import com.eg.swa.ntier.shopping.repository.CartItemRepository;
import com.eg.swa.ntier.shopping.repository.ShoppingCartRepository;

@Service
public class ShoppingCartService {
    
    private final ShoppingCartRepository shoppingCartRepository;
    private final CartItemRepository cartItemRepository;
    
    public ShoppingCartService(ShoppingCartRepository shoppingCartRepository, CartItemRepository cartItemRepository) {
        this.shoppingCartRepository = shoppingCartRepository;
        this.cartItemRepository = cartItemRepository;
    }
    
    public ShoppingCart getOrCreateCart(Customer customer) {
        Optional<ShoppingCart> optionalCart = shoppingCartRepository.findByUserId(user.getId());
        if (optionalCart.isPresent()) {
            return optionalCart.get();
        } else {
            ShoppingCart cart = new ShoppingCart();
            cart.setUser(user);
            return shoppingCartRepository.save(cart);
        }
    }
    
    public void addItemToCart(ShoppingCart cart, Product product, int quantity) {
        Optional<CartItem> optionalCartItem = cart.getItems().stream()
                .filter(item -> item.getProduct().equals(product))
                .findFirst();
        if (optionalCartItem.isPresent()) {
            CartItem cartItem = optionalCartItem.get();
            cartItem.setQuantity(cartItem.getQuantity() + quantity);
            cartItemRepository.save(cartItem);
        } else {
            CartItem cartItem = new CartItem();
            cartItem.setCart(cart);
            cartItem.setProduct(product);
            cartItem.setQuantity(quantity);
            cart.getItems().add(cartItem);
            shoppingCartRepository.save(cart);
        }
    }
    
    public void updateItemInCart(CartItem cartItem, int quantity) {
        cartItem.setQuantity(quantity);
        cartItemRepository.save(cartItem);
    }
    
    public void removeItemFromCart(CartItem cartItem) {
        cartItemRepository.delete(cartItem);
    }
    
    public void clearCart(ShoppingCart cart) {
        cartItemRepository.deleteByCartId(cart.getId());
    }
    
}

